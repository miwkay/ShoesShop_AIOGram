import ast
import sqlite3
import logging
import aiogram.utils.markdown as md
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardButton

from config import BOT_TOKEN, chat_id_admin
from keyboards import kb_main, kb_catalog, kb_complaint, kb_on_main, kb_admin, kb_order, \
    kb_admin_archive, kb_clean_archive, kb_clean_orders
from messages import HELP_COMMAND, START_MESSAGE, NOT_DEFINED, DELIVERY
from sql import add_shoes_db, check_and_add_user, clean_db_orders

logging.basicConfig(level=logging.INFO)


id_admin = chat_id_admin
bot = Bot(BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    print('Bot has been started..')


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.from_user.id == id_admin:
        await bot.send_sticker(message.from_user.id,
                               sticker="CAACAgUAAxkBAAEGzN5jlu9tw02BOAPlVWg8M8N6KMeQ6QACkQMAAukKyAN2IcIPRrR79SsE")
        await message.answer(text=f"–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}! ü´°\n"
                                  f"–†–µ–∂–∏–º <b>–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. üòé",
                             parse_mode="HTML",
                             reply_markup=kb_admin)
        await message.delete()
    else:
        check_and_add_user(message)
        await message.answer(text=f"<b>–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}!</b> üëã {START_MESSAGE}",
                             parse_mode="HTML",
                             reply_markup=kb_main)
        await message.delete()


# –î–ª—è add —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ë–î
class FormAdd(StatesGroup):
    model = State()  # –ú–æ–¥–µ–ª—å
    description = State()  # –û–ø–∏—Å
    gender = State()  # –°—Ç–∞—Ç—å
    price = State()  # –¶—ñ–Ω–∞
    foto1 = State()  # –§–æ—Ç–æ1
    foto2 = State()  # –§–æ—Ç–æ2
    foto3 = State()  # –§–æ—Ç–æ3


# –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
class FormSupport(StatesGroup):
    mailing = State()  # –†–æ–∑—Å–∏–ª–∫–∞
    support = State()  # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞


# –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
class Form(StatesGroup):
    size = State()  # –†–æ–∑–º—ñ—Ä
    name = State()  # –Ü–º'—è
    phone = State()  # –¢–µ–ª–µ—Ñ–æ–Ω
    address = State()  # –ê–¥—Ä–µ—Å–∞


@dp.message_handler(Text(equals='–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä ‚ûï'))
async def add_item_name(message: types.Message):
    if message.from_user.id == id_admin:
        await FormAdd.model.set()
        await message.answer(text="<b>–ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ:</b>\n"
                                  "(<em>–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:</em> Nike Air Max Vg-R)",
                             parse_mode="HTML")
    else:
        await message.answer(text="–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb_main)


@dp.message_handler(state=FormAdd.model)
async def add_item_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['model'] = message.text
    await FormAdd.next()
    await message.answer(text="<b>–û–ø–∏—Å:</b>\n"
                              "(<em>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∞ —ñ–Ω—à–µ</em>)",
                         parse_mode="HTML")


@dp.message_handler(state=FormAdd.description)
async def add_item_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await FormAdd.next()
    ikb_gender = ReplyKeyboardMarkup(resize_keyboard=True)
    ib_m = InlineKeyboardButton('—á')
    ib_w = InlineKeyboardButton('–∂')
    ikb_gender.add(ib_m, ib_w)
    await message.answer(text="<b>–°—Ç–∞—Ç—å:</b>\n"
                              "(<em>–ß–æ–ª–æ–≤—ñ—á–∞ —á–∏ –ñ—ñ–Ω–æ—á–∞</em>)\n"
                              "–ù–ê–¢–ò–°–ù–ò –í–Ü–î–ü–û–í–Ü–î–ù–£ –ö–ù–û–ü–ö–£ üëá",
                         parse_mode="HTML",
                         reply_markup=ikb_gender)


@dp.message_handler(state=FormAdd.gender)
async def add_item_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text
    await FormAdd.next()
    await message.answer(text="<b>–¶—ñ–Ω–∞ —É –≥—Ä–Ω:</b>\n"
                              "(<em>–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:</em> 485)",
                         parse_mode="HTML")


@dp.message_handler(lambda message: not message.text.isdigit(), state=FormAdd.price)
async def item_price_only_digits(message: types.Message):
    return await message.reply("–¶—ñ–Ω–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –ª–∏—à–µ –∑ —Ü–∏—Ñ—Ä.\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: (digits only)")


@dp.message_handler(state=FormAdd.price)
async def add_item_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await FormAdd.next()
    await message.answer(text="<b>–§–æ—Ç–æ 1 –∑ 3:</b>\n"
                              "(<em>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É</em>)",
                         parse_mode="HTML")


@dp.message_handler(state=FormAdd.foto1)
async def add_item_photo2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['foto1'] = message.text
        await FormAdd.next()
        await message.answer(text="<b>–§–æ—Ç–æ 2 –∑ 3:</b>\n"
                                  "(<em>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É</em>)",
                             parse_mode="HTML")


@dp.message_handler(state=FormAdd.foto2)
async def add_item_photo3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['foto2'] = message.text
        await FormAdd.next()
        await message.answer(text="<b>–§–æ—Ç–æ 3 –∑ 3:</b>\n"
                                  "(<em>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É</em>)",
                             parse_mode="HTML")


@dp.message_handler(state=FormAdd.foto3)
async def demonstration_item_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['foto3'] = message.text
        await FormAdd.next()
        # add item in db
        add_shoes_db(data['model'],
                     data['price'],
                     data['description'],
                     data['gender'],
                     data['foto1'],
                     data['foto2'],
                     data['foto3'])

        await message.answer(text="<b>–ì–æ—Ç–æ–≤–æ!</b>", parse_mode="HTML", reply_markup=kb_admin)


# –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä —ñ–∑ –ë–î
def delete_item_kb(data_id):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data="['del', '" + str(data_id) + "']")
    keyboard.add(button)
    return keyboard


# –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä —ñ–∑ –ë–î
@dp.message_handler(Text(equals='–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä ‚ûñ'))
async def delete_item(message: types.Message):
    if message.from_user.id == id_admin:
        with sqlite3.connect('shop.db', check_same_thread=False) as db:
            cur = db.cursor()
            cur.execute("SELECT model, price, gender FROM shoes")
            data = cur.fetchall()
            for i in data:
                await message.answer(text=f'<b>{i[0]} ({i[2]}) : {i[1]} –≥—Ä–Ω</b>',
                                     parse_mode="HTML",
                                     reply_markup=delete_item_kb(i[0]))

    else:
        await message.answer(text="–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb_main)


@dp.callback_query_handler()
async def callback_order(callback: types.CallbackQuery):
    if callback.data.startswith("['buy'"):
        with sqlite3.connect('shop.db', check_same_thread=False) as db:
            cursor = db.cursor()
            cursor.execute("SELECT model, price, id FROM shoes WHERE model = ?",
                           (ast.literal_eval(callback.data)[1],))
            data_buy = cursor.fetchall()
            model = data_buy[0][0]
            price = f'{data_buy[0][1]} –≥—Ä–Ω.'
            item_id = data_buy[0][2]
            await callback.message.answer(text=f'–ó–∞–º–æ–≤–∏—Ç–∏ <b>{model}</b>\n'
                                               f'–∑–∞ —Ü—ñ–Ω–æ—é <b>{price}</b>?\n'
                                               f'–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É üëá',
                                          parse_mode="HTML",
                                          reply_markup=kb_order)
            con = sqlite3.connect('shop.db')
            cur = con.cursor()
            cur.execute('INSERT INTO cart\n'
                        '(user_id, item_id)\n'
                        'VALUES (?, ?)',
                        (callback.message.from_user.id, item_id))
            con.commit()
            cur.close()

    if callback.data.startswith("['del'"):
        with sqlite3.connect('shop.db', check_same_thread=False) as db:
            cursor = db.cursor()
            cursor.execute("DELETE FROM shoes WHERE model = ?", (ast.literal_eval(callback.data)[1],))
            await callback.answer(text='–í–∏–¥–∞–ª–µ–Ω–æ!')
            await callback.message.reply(text='–í–∏–¥–∞–ª–µ–Ω–æ!')
    await callback.answer(text='Ok!')


# –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.message_handler(Text(equals='–ó–∞–º–æ–≤–∏—Ç–∏! üòé'))
async def order_by_size(message: types.Message):
    await Form.size.set()
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è:")


@dp.message_handler(state=Form.size)
async def order_by_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text
    await Form.next()
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –§–Ü–û:")


@dp.message_handler(state=Form.name)
async def order_by_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Form.next()
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")


@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.phone)
async def process_phone_invalid(message: types.Message):
    return await message.reply("–ù–æ–º–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ –∑ —Ü–∏—Ñ—Ä.\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: (digits only)")


@dp.message_handler(state=Form.phone)
async def order_by_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
    await Form.next()
    await message.answer("–í–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—É —Ç–∞ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:")


@dp.message_handler(state=Form.address)
async def demonstration_order_by_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
        with sqlite3.connect('shop.db', check_same_thread=False) as db:
            cur = db.cursor()
            item = cur.execute("SELECT item_id FROM cart").fetchall()
            item = item[-1][-1]
            item = cur.execute("SELECT model, gender, price FROM shoes WHERE id == ?", (item,)).fetchall()

        await bot.send_message(
            message.chat.id,
            md.text(
                md.text("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n"
                        "–Ü–º'—è:", md.bold(data['name'])),
                md.text('–¢–µ–ª–µ—Ñ–æ–Ω:', md.code(data['phone'])),
                md.text('–ê–¥—Ä–µ—Å–∞:', data['address']),
                md.text('–ú–æ–¥–µ–ª—å:', item[0][0]),
                md.text('–†–æ–∑–º—ñ—Ä:', md.code(data['size'])),
                md.text('–°—Ç–∞—Ç—å:', item[0][1]),
                md.text('–¶—ñ–Ω–∞:', f'{item[0][2]} –≥—Ä–Ω.'),
                md.text("–ü—Ä–æ–¥–∞–≤–µ—Ü—å –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑–≤'—è–∂–µ—Ç—å—Å—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                        "–î—è–∫—É—é —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å!"),
                sep='\n',
            ),
            reply_markup=kb_on_main,
            parse_mode=ParseMode.MARKDOWN,
        )
        await bot.send_message(
            id_admin,
            md.text(
                md.text("–ù–æ–≤–∏–π –∑–∞–∫–∞–∑:\n"
                        "–Ü–º'—è:", md.bold(data['name'])),
                md.text('–¢–µ–ª–µ—Ñ–æ–Ω:', md.code(data['phone'])),
                md.text('–ê–¥—Ä–µ—Å–∞:', data['address']),
                md.text('–ú–æ–¥–µ–ª—å:', item[0][0]),
                md.text('–†–æ–∑–º—ñ—Ä:', md.code(data['size'])),
                md.text('–°—Ç–∞—Ç—å:', item[0][1]),
                md.text('–¶—ñ–Ω–∞:', f'{item[0][2]} –≥—Ä–Ω.'),
                sep='\n',
            ),
            parse_mode=ParseMode.MARKDOWN,
        )
        con = sqlite3.connect('shop.db')
        cur = con.cursor()
        cur.execute('INSERT INTO orders\n'
                    '(user_id, name, phone, address, model, size,\n'
                    'gender, price, date, username, first_name, last_name)\n'
                    'VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (message.from_user.id,
                                                                    md.text(data['name']),
                                                                    md.text(data['phone']),
                                                                    md.text(data['address']),
                                                                    md.text(item[0][0]),
                                                                    md.text(data['size']),
                                                                    md.text(item[0][1]),
                                                                    md.text(item[0][2]),
                                                                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                                                                    message.from_user.username,
                                                                    message.from_user.first_name,
                                                                    message.from_user.last_name))
        cur.execute('DELETE FROM cart')
        con.commit()
        cur.close()
    await state.finish()


@dp.message_handler(Text(equals='–ê—Ä—Ö—ñ–≤ üóÇ'))
async def show_archive(message: types.Message):
    await message.answer(text="<b>–¢–∏—Å–Ω–∏ —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å:</b>", parse_mode="HTML", reply_markup=kb_admin_archive)


@dp.message_handler(Text(equals='–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üîé'))
async def delete_data_archive(message: types.Message):
    if message.from_user.id == id_admin:
        with sqlite3.connect('shop.db', check_same_thread=False) as db:
            cur = db.cursor()
            cur.execute("SELECT order_id, user_id, name, phone, address, model, size, gender,\n"
                        "price, date, username, first_name, last_name FROM orders")
            data = cur.fetchall()
            num = 0
            for i in data:
                await message.answer(text=f'<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {i[0]}</b>\n'
                                          f'{i[5]}\n'
                                          f'({i[7]}) {i[6]}—Ä. - {i[8]} –≥—Ä–Ω.\n'
                                          f'{i[2]}\n'
                                          f'—Ç: {i[3]}\n'
                                          f'{i[4]}\n'
                                          f'<em>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±–∞—î—Ä–∞:</em>\n'
                                          f'username: @{i[10]}\n'
                                          f'user_id: {i[1]}\n'
                                          f'first_name: {i[11]}\n'
                                          f'last_name: {i[12]}\n'
                                          f'<b>{i[9]}</b>',
                                     parse_mode="HTML")
                num += 1
            await message.answer(text=f'–£—Å—å–æ–≥–æ <b>{num}</b> –∑–∞–º–æ–≤–ª–µ–Ω—å!',
                                 parse_mode="HTML",
                                 reply_markup=kb_clean_archive)
    else:
        await message.answer(text="–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb_main)


@dp.message_handler(Text(equals='–•—Ç–æ –∑–∞—Ö–æ–¥–∏–≤ üï∫'))
async def visit_data(message: types.Message):
    if message.from_user.id == id_admin:
        with sqlite3.connect('shop.db', check_same_thread=False) as db:
            cur = db.cursor()
            cur.execute("SELECT user_id, username, first_name, last_name, date FROM users")
            data = cur.fetchall()
            num = 0
            for i in data:
                await message.answer(text=f'<b>{i[4]}</b>\n'
                                          f'user_id: {i[0]}\n'
                                          f'username: @{i[1]}\n'
                                          f'first_name: {i[2]}\n'
                                          f'last_name: {i[3]}\n',
                                     parse_mode="HTML", reply_markup=kb_admin)
                num += 1
            await message.answer(text=f'–£—Å—å–æ–≥–æ <b>{num}</b> –ª—é–¥–µ–π –∑–Ω–∞—é—Ç—å –ø—Ä–æ —Ç–≤—ñ–π –º–∞–≥–∞–∑–∏–Ω!', parse_mode="HTML")
    else:
        await message.answer(text="–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb_main)


@dp.message_handler(Text(equals='–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ùå'))
async def delete_data_orders(message: types.Message):
    if message.from_user.id == id_admin:
        await message.answer(text="–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –±–µ–∑ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è?", reply_markup=kb_clean_orders)
    else:
        await message.answer(text="–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb_main)


@dp.message_handler(Text(equals='–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!'))
async def delete_data_orders_done(message: types.Message):
    if message.from_user.id == id_admin:
        clean_db_orders()
        await message.answer(text="–í–∏–¥–∞–ª–µ–Ω–æ! ‚úÖ", reply_markup=kb_admin)
    else:
        await message.answer(text="–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=kb_main)


@dp.message_handler(Text(equals='–ö –ê –¢ –ê –õ –û –ì   –í –ó –£ –¢ –¢ –Ø  üì¶'))
async def open_kb_catalog(message: types.Message):
    await message.answer(text='–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=kb_catalog)
    await message.delete()


@dp.message_handler(Text(equals='–ù–∞ –≥–æ–ª–æ–≤–Ω—É ü´°'))
async def open_kb_main(message: types.Message):
    await message.answer(text='<b>–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞!</b>' + HELP_COMMAND,
                         parse_mode="HTML",
                         reply_markup=kb_main)
    await message.delete()


@dp.message_handler(Text(equals='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è üí°'))
async def open_kb_info(message: types.Message):
    await message.answer(text='–¢—É—Ç –±—É–¥–µ –≤–∫–∞–∑–∞–Ω–∞ <b>–∫–æ—Ä–∏—Å–Ω–∞ –ø–æ–∫—É–ø—Ü–µ–≤—ñ</b> —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è!\n'
                              '–¢–∏–ø—É "–Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –±–ª–∞-–±–ª–∞-–±–ª–∞"',
                         parse_mode="HTML",
                         reply_markup=kb_complaint)
    await message.delete()


@dp.message_handler(Text(equals='–†–æ–∑—Å–∏–ª–∫–∞ üìÆ'))
async def mailing(message: types.Message):
    await FormSupport.mailing.set()
    await message.answer(text="<b>–¢–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:</b>",
                         parse_mode="HTML",
                         reply_markup=kb_main)


@dp.message_handler(state=FormSupport.mailing)
async def process_mailing(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['mailing'] = message.text
    with sqlite3.connect('shop.db', check_same_thread=False) as db:
        cur = db.cursor()
        cur.execute("SELECT user_id FROM users")
        user_id = cur.fetchall()
        num_y = 0
        num_n = 0
    for i in user_id:
        try:
            await bot.send_message(i[0], md.text(data['mailing']), disable_notification=True)
            num_y += 1
        except:
            num_n += 1
    await message.answer(md.text(f'<b>{num_n}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ <b>–ù–ï –û–¢–†–ò–ú–ê–õ–ò</b> –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n'
                                 f'\n'
                                 f'<b>{num_y}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ <b>–û–¢–†–ò–ú–ê–õ–ò</b> –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n',
                                 data['mailing']),
                         parse_mode="HTML",
                         reply_markup=kb_main)
    await state.finish()


@dp.message_handler(Text(equals='–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ üõ†'))
async def cmd_support(message: types.Message):
    await FormSupport.support.set()
    await message.answer(text="<b>–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>",
                         parse_mode="HTML",
                         reply_markup=kb_main)


@dp.message_handler(state=FormSupport.support)
async def process_support(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['support'] = message.text
    await message.answer(text=f'–î—è–∫—É—é {message.from_user.first_name}, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ!', reply_markup=kb_main)
    await bot.send_message(id_admin, md.text(f"‚ÄºÔ∏è‚ÄºÔ∏è–ü–Ü–î–¢–†–ò–ú–ö–ê‚ÄºÔ∏è‚ÄºÔ∏è\n"
                                             f"–ù—ñ–∫: @{message.from_user.username}\n"
                                             f"–Ü–º'—è: {message.from_user.first_name} {message.from_user.last_name}\n"
                                             f"ID: {message.from_user.id}\n"
                                             f" - ", data['support']),
                           parse_mode=ParseMode.MARKDOWN)
    await state.finish()


@dp.message_handler(Text(equals='–¢–∞–±–ª–∏—Ü—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ üìê'))
async def table_of_sizes(message: types.Message):
    await bot.send_photo(chat_id=message.chat.id,
                         photo='https://shoes-poland.com.ua/image/catalog/womens-shoes/5243/size.jpg',
                         reply_markup=kb_main)
    await message.delete()


@dp.message_handler(Text(equals='–°–∞–º–æ–≤–∏–≤—ñ–∑ üìç'))
async def pickup(message: types.Message):
    await bot.send_location(chat_id=message.chat.id,
                            latitude=22.2744134,  # —à–∏—Ä–æ—Ç–∞
                            longitude=114.1778873,  # –¥–æ–≤–≥–æ—Ç–∞
                            reply_markup=kb_on_main)
    await message.answer(text='–ó–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é.')
    await message.delete()


@dp.message_handler(Text(equals='–î–æ—Å—Ç–∞–≤–∫–∞ üöï'))
async def delivery(message: types.Message):
    await message.answer(text=DELIVERY,
                         parse_mode="HTML",
                         reply_markup=kb_on_main)
    await message.delete()


# –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä —ñ–∑ –ë–î Keyboard
def buy_item_kb(data_id, coast):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton(f"–ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞ {coast} –≥—Ä–Ω.", callback_data="['buy', '" + str(data_id) + "']")
    keyboard.add(button)
    return keyboard


# –ñ—ñ–Ω–æ—á–∏–π —Ç–æ–≤–∞—Ä —ñ–∑ –ë–î
@dp.message_handler(Text(equals='–ñ—ñ–Ω–æ—á—ñ üë†'))
async def woman_data_item(message: types.Message):
    with sqlite3.connect('shop.db', check_same_thread=False) as db:
        cur = db.cursor()
        cur.execute("SELECT model, description, price, gender, foto1, foto2, foto3 FROM shoes")
        data = cur.fetchall()
        for i in data:
            if i[3] == '–∂':
                media = types.MediaGroup()
                media.attach_photo(i[4])
                media.attach_photo(i[5])
                media.attach_photo(i[6])
                await message.reply_media_group(media=media)
                await message.answer(text=f'<b>{i[0]}</b>\n'
                                          f'–¶—ñ–Ω–∞: {i[2]} –≥—Ä–Ω.\n'
                                          f'\n    {i[1]}', parse_mode="HTML", reply_markup=buy_item_kb(i[0], i[2]))


# –ß–æ–ª–æ–≤—ñ—á–∏–π —Ç–æ–≤–∞—Ä —ñ–∑ –ë–î
@dp.message_handler(Text(equals='–ß–æ–ª–æ–≤—ñ—á—ñ ü•æ'))
async def man_data_item(message: types.Message):
    with sqlite3.connect('shop.db', check_same_thread=False) as db:
        cur = db.cursor()
        cur.execute("SELECT model, description, price, gender, foto1, foto2, foto3 FROM shoes")
        data = cur.fetchall()
        for i in data:
            if i[3] == '—á':
                media = types.MediaGroup()
                media.attach_photo(i[4])
                media.attach_photo(i[5])
                media.attach_photo(i[6])
                await message.reply_media_group(media=media)
                await message.answer(text=f'<b>{i[0]}</b>\n'
                                          f'–¶—ñ–Ω–∞: {i[2]} –≥—Ä–Ω.\n'
                                          f'\n    {i[1]}', parse_mode="HTML", reply_markup=buy_item_kb(i[0], i[2]))


@dp.callback_query_handler()
async def error(callback: types.CallbackQuery):
    await callback.answer(text='Error!')


@dp.message_handler()
async def not_defined(message: types.Message):
    await message.reply(NOT_DEFINED)


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
